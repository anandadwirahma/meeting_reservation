<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class user extends CI_Controller {

	function __construct() {
   		parent::__construct();
   		$this->load->helper(array('form', 'url'));
   		$this->load->library('form_validation');

   		$data['nama'] = $this->session->userdata('nama');
   		$this->load->view('user/header', $data);

   		//load model m_user
		$this->load->model('user/m_user');
 	}

	function index(){
		$this->load->view('user/home');
	}

	function lihat_profil(){
		
		//declarasion variable id from session
		$id = $this->session->userdata('id_karyawan');
		$result = $this->m_user->lihat_profil($id);
		$data = array(
            'data' => $result
        );
		$this->load->view('user/lihat_profil', $data);
	}
	
	function edit_profil(){

		//declarasion variable id from session
		$id = $this->session->userdata('id_karyawan');
		$result = $this->m_user->lihat_profil($id);
		$data = array(
            'data' => $result
        );

		$this->load->view('user/edit_profil', $data);

	}

	function edit_profile_exc(){
		
		$id = $this->input->post('id');
		$nama = $this->input->post('nama');
		$departemen = $this->input->post('departemen');
		$email = $this->input->post('email');
		$notelp = $this->input->post('notelp');
		$username = $this->input->post('username');
		$password = md5($this->input->post('password'));
		$this->form_validation->set_rules('nama', 'Nama.', 'required');
		$this->form_validation->set_rules('departemen', 'Departemen.', 'required');
		$this->form_validation->set_rules('email', 'Email.', 'required|email');
		$this->form_validation->set_rules('notelp', 'No.Telp.', 'required|email');
		$this->form_validation->set_rules('username', 'Username.', 'required');
		$this->form_validation->set_rules('password', 'Password.', 'required');

		$data = array
        (
        	'nama' => $nama,
            'departemen' => $departemen,
            'email' => $email,
            'no_telp'=> $notelp,
            'username'=> $username,
            'password'=> $password
        );

        //execute funtion model edit_profil
		$this->m_user->edit_profil($data,$id);

        redirect(base_url() . 'user/lihat_profil');
	}
	
	function book_room(){
		
		//Show form booking room
		$ruang = $this->m_user->show_room();
		$email = $this->m_user->show_email();
		
		$data = array(
           	'ruang' => $ruang,
           	'email' => $email
        );
		$this->load->view('user/book_room',$data);
	}

	function book_room_exc(){

		$id_karyawan = $this->session->userdata('id_karyawan');
		$tgl = $this->input->post('tanggal');
		$start_time = $this->input->post('start_time');
		$end_time = $this->input->post('end_time');
		$email = $this->input->post('email');
		$ruang = $this->input->post('ruang');
		$topik = $this->input->post('topik');
		$this->form_validation->set_rules('tanggal', 'Tanggal.', 'required');
		$this->form_validation->set_rules('start_time', 'Start_time.', 'required');
		$this->form_validation->set_rules('end_time', 'End_time.', 'required');
		$this->form_validation->set_rules('email', 'Email.', 'required');
		$this->form_validation->set_rules('ruang', 'Ruang.', 'required');
		$this->form_validation->set_rules('topik', 'Topik.', 'required');
		
		//If form booking room submmited
		if ($this->form_validation->run() == TRUE) 
		{
			//reformat date for insert to mysql
			$tgl_meeting = date("Y-m-d", strtotime($tgl));
			$tgl_psn = date('Y-m-d');

			//get uniq id number for id_det_booking 
			$id_det_booking = $this->m_user->select_max_id('tb_det_booking','id_det_booking');
			$data_det_booking = array (
				'id_det_booking' => $id_det_booking,
        		'id_ruang' => $ruang,
            	'tanggal_psn' => $tgl_psn,
            	'tanggal_meeting' => $tgl_meeting,
            	'jam_mulai' => $start_time,
            	'jam_akhir'=> $end_time,
            	'topik' => $topik
            );
            //insert_to_tb_detail_booking        
			$this->m_user->insert_booking('tb_det_booking',$data_det_booking);

			//get uniq id number for id_booking 
			$id_booking = $this->m_user->select_max_id('tb_booking','id_booking');
			$data_booking = array (
				'id_booking' => $id_booking,
				'id_karyawan' => $id_karyawan,
        		'id_det_booking' => $id_det_booking,
            	'status' => 'On Progress'
            );
            //insert_to_tb_booking
            $this->m_user->insert_booking('tb_booking',$data_booking);
            
            //get list peserta meeting
            for ($i = 0; $i < count($email); $i++) {
            	$data_peserta = array (
            		'id_booking' => $id_booking,
            		'id_karyawan' => $email[$i]
            	);
            	//insert_to_tb_peserta
            	$this->m_user->insert_booking('tb_peserta',$data_peserta);	 
			}

            redirect(base_url() . 'user/history');

		}else{
			redirect(base_url() . 'user/book_room');
		}
	}

	function cancel_booking(){
		$id_booking = $this->uri->segment(3);
		$id_det_booking = $this->uri->segment(4);

		//delete record in tb_peserta
        $this->m_user->cancel_booking('tb_peserta','id_booking',$id_booking);
        //delete record in tb_booking
        $this->m_user->update_status_booking($id_booking);
        
        redirect(base_url() . 'user/history');
	}

	function reschedule(){
		$id_booking = $this->uri->segment(3);
		$id_det_booking = $this->uri->segment(4);
		$data['dt_book'] = $this->m_user->show_booking($id_det_booking);
		$data['ruang'] = $this->m_user->show_room();
		$data['email'] = $this->m_user->show_email();

		$this->load->view('user/reschedule',$data);
	}

	function reschedule_exc(){
		$id_booking = $this->input->post('id_booking');
		$id_det_booking = $this->input->post('id_det_booking');
		$tgl = $this->input->post('tanggal');
		$start_time = $this->input->post('start_time');
		$end_time = $this->input->post('end_time');
		$email = $this->input->post('email');
		$ruang = $this->input->post('ruang');
		$topik = $this->input->post('topik');
		$this->form_validation->set_rules('tanggal', 'Tanggal.', 'required');
		$this->form_validation->set_rules('start_time', 'Start_time.', 'required');
		$this->form_validation->set_rules('end_time', 'End_time.', 'required');
		$this->form_validation->set_rules('email', 'Email.', 'required');
		$this->form_validation->set_rules('ruang', 'Ruang.', 'required');
		$this->form_validation->set_rules('topik', 'Topik.', 'required');

		//If form booking room submmited
		if ($this->form_validation->run() == TRUE) 
		{
			//reformat date for insert to mysql
			$tgl_meeting = date("Y-m-d", strtotime($tgl));

			$data_det_booking = array (
				'id_ruang' => $ruang,
            	'tanggal_meeting' => $tgl_meeting,
            	'jam_mulai' => $start_time,
            	'jam_akhir'=> $end_time,
            	'topik' => $topik
            );
			//update detail booking
			$this->m_user->update_schedule('tb_det_booking','id_det_booking',$id_det_booking,$data_det_booking);

			//cleansing data peserta
			$this->m_user->cleansing_peserta($id_booking);
			//get list peserta meeting
            for ($i = 0; $i < count($email); $i++) {
            	$data_peserta = array (
            		'id_booking' => $id_booking,
            		'id_karyawan' => $email[$i]
            	);
            	//insert_to_tb_peserta
            	$this->m_user->insert_booking('tb_peserta',$data_peserta);	 
			}

        }

         redirect(base_url() . 'user/history');
	}

	function history(){

		$id = $this->session->userdata('id_karyawan');
		$data['history'] = $this->m_user->show_history($id);
		
		$this->load->view('user/history',$data);
	}

}